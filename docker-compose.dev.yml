services:
  gc-api: # Définition du service principal nommé "node-api"
    container_name: gc-api # Nom du conteneur Docker pour ce service
    build:
      context: . # Le contexte de construction est le répertoire actuel
      dockerfile: Dockerfile.dev # Utilise le fichier Dockerfile.dev pour construire l'image
    ports:
      - "${API_PORT}:3000" # Mappe le port défini dans la variable d'environnement API_PORT au port 3000 du conteneur
    env_file:
      - .env # Charge les variables d'environnement depuis le fichier .env
    environment:
      - NODE_ENV=development # Définit la variable d'environnement NODE_ENV à "development"
      - DEBUG=app:*,config:*,migration:* # Définit la variable d'environnement DEBUG pour activer le débogage
    volumes:
      - .:/usr/src/app # Monte le dossier local ./src dans /usr/src/app du conteneur (synchronisation des fichiers source)
    restart: unless-stopped
    # Dépendances du service
    depends_on:
      gc-db:
        condition: service_healthy
      gc-redis:
        condition: service_healthy

  # Définition du service PostgreSQL
  gc-db:
    # Image Docker officielle de PostgreSQL
    image: postgres:16
    # Nom explicite du conteneur pour faciliter son identification
    container_name: gc-db
    # Redémarre automatiquement le conteneur sauf en cas d'arrêt manuel
    restart: unless-stopped
    # Charge les variables d'environnement depuis le fichier ./env
    env_file:
      - ./.env
    # Mappe le port PostgreSQL défini dans .env (par défaut 5432)
    ports:
      - '${POSTGRES_PORT}:5432'
    # Monte un volume local contenant des scripts d'initialisation dans le conteneur
    volumes:
      # Monte le dossier nommé Docker 'gc-pg-data' dans le conteneur PostgreSQL pour persister les données
      - gc-pg-data:/var/lib/postgresql/data

    # Vérifie si PostgreSQL est prêt à accepter des connexions
    healthcheck:
      # Commande exécutée pour vérifier l'état de PostgreSQL
      test: ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}', '-d', '${POSTGRES_DB}']
      # Intervalle entre chaque vérification
      interval: 10s
      # Temps maximum pour chaque vérification
      timeout: 5s
      # Nombre de tentatives avant de considérer le service comme non sain
      retries: 5

  gc-redis:
    # Image Docker officielle de Redis
    image: redis:latest
    # Nom explicite du conteneur pour faciliter son identification
    container_name: gc-redis
    # Redémarre automatiquement le conteneur sauf en cas d'arrêt manuel
    restart: unless-stopped
    # Mappe le port Redis défini dans .env (par défaut 6379)
    ports:
      - '${REDIS_PORT}:6379'
    # Monte un volume local contenant des scripts d'initialisation dans le conteneur
    volumes:
      - gc-redis-data:/data
    # Vérifie si Redis est prêt à accepter des connexions
    healthcheck:
      # Commande exécutée pour vérifier l'état de Redis
      # https://stackoverflow.com/questions/67904609/how-do-you-perform-a-healthcheck-in-the-redis-docker-image
      test: ['CMD', 'redis-cli', 'ping']
      # Intervalle entre chaque vérification
      interval: 10s
      # Temps maximum pour chaque vérification
      timeout: 5s
      # Nombre de tentatives avant de considérer le service comme non sain
      retries: 5

# Déclaration des volumes nommés
volumes:
  gc-pg-data:
  gc-redis-data: